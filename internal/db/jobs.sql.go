// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: jobs.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :exec
insert into jobs (action, data)
values ($1, $2)
returning id, job_uuid, status, data, result, action, created_at, updated_at
`

type CreateJobParams struct {
	Action string
	Data   []int32
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) error {
	_, err := q.db.Exec(ctx, createJob, arg.Action, arg.Data)
	return err
}

const getAllJobs = `-- name: GetAllJobs :many
select id, job_uuid, status, data, result, action, created_at, updated_at from jobs order by created_at
`

func (q *Queries) GetAllJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.Query(ctx, getAllJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.JobUuid,
			&i.Status,
			&i.Data,
			&i.Result,
			&i.Action,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobsByStatus = `-- name: GetJobsByStatus :many
select id, job_uuid, status, data, result, action, created_at, updated_at from jobs where status = $1 order by created_at
`

func (q *Queries) GetJobsByStatus(ctx context.Context, status JobStatus) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.JobUuid,
			&i.Status,
			&i.Data,
			&i.Result,
			&i.Action,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingJobs = `-- name: GetPendingJobs :many
select id, data, "action" from jobs
where status = 'PENDING'
order by created_at
for update skip locked
`

type GetPendingJobsRow struct {
	ID     int32
	Data   []int32
	Action string
}

func (q *Queries) GetPendingJobs(ctx context.Context) ([]GetPendingJobsRow, error) {
	rows, err := q.db.Query(ctx, getPendingJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingJobsRow
	for rows.Next() {
		var i GetPendingJobsRow
		if err := rows.Scan(&i.ID, &i.Data, &i.Action); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :exec
update jobs
set result = $1, status = $2, updated_at = now()
where id = $3
`

type UpdateJobParams struct {
	Result sql.NullInt32
	Status JobStatus
	Job    int32
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.db.Exec(ctx, updateJob, arg.Result, arg.Status, arg.Job)
	return err
}
